# 🏦 Phoenix 95 헤지펀드급 트레이딩 시스템 - 구축 명령 규칙

## 📋 시스템 개요
```
설계 철학: "Simple is Stable" - 복잡성은 적이고, 단순함이 곧 수익
아키텍처: 검증된 4개 핵심 컴포넌트 (11개 서비스 → 4개 서비스로 86% 단순화)
성능 목표: 응답시간 100ms 이하, 메모리 500MB 이하, 가용성 99.95%
레버리지: 20x ISOLATED 마진, 2% 손절익절 고정
```

## 🎯 핵심 4개 컴포넌트

### 🧠 BRAIN - Signal Intelligence Engine (포트: 8100)
- **역할**: Phoenix 95 AI 분석 + 신호 처리 통합
- **기능**: 85% 이상 신뢰도 신호만 통과, Kelly Criterion 포지션 사이징
- **파일**: `brain_service.py`
- **엔드포인트**: `/analyze`, `/health`

### ⚖️ RISK - Position & Risk Manager (포트: 8101)  
- **역할**: 리스크 관리 (최우선 순위)
- **기능**: 20x 레버리지 계산, 청산가 모니터링, 3단계 리스크 검증
- **파일**: `risk_service.py`
- **엔드포인트**: `/check`, `/status`, `/update`

### ⚡ EXECUTE - Trade Execution Engine (포트: 8102)
- **역할**: 거래 실행 및 포지션 관리
- **기능**: 바이낸스 API 연동, 2% 익절손절 자동화, 실시간 모니터링
- **파일**: `execute_service.py`
- **엔드포인트**: `/trade`, `/positions`, `/close`

### 📱 NOTIFY - Alert & Monitor Hub (포트: 8103)
- **역할**: 알림 및 모니터링
- **기능**: 텔레그램 알림, 실시간 대시보드, 성능 추적
- **파일**: `notify_service.py`
- **엔드포인트**: `/alert`, `/dashboard`, `/metrics`

---

## 🔧 명령 실행 규칙

### 📂 프로젝트 구조 생성 명령
```
시작점: C:\trading_system_v4
명령어: "Phoenix 95 프로젝트 구조 생성"
결과물: 검증된 폴더 구조 + 초기 설정 파일들
```

### 🏗️ 서비스 구축 순서
1. **BRAIN 서비스 구축** (Phoenix 95 AI 엔진)
2. **RISK 서비스 구축** (리스크 관리자)  
3. **EXECUTE 서비스 구축** (거래 실행기)
4. **NOTIFY 서비스 구축** (알림 허브)
5. **통합 테스트 및 배포**

### 📋 각 단계별 명령 패턴
```
명령어 형식: "[컴포넌트명] 서비스 완전 구현"
출력 요구사항: 
- PowerShell Here-String 형식
- 복사-붙여넣기 즉시 실행 가능
- 완전한 코드 + 설정 + 테스트
- 한글 주석 및 로그 메시지
```

---

## 📊 핵심 설정값 (검증됨)

### 🔐 보안 설정
```python
TELEGRAM_CONFIG = {
    "token": "7386542811:AAEZ21p30rES1k8NxNM2xbZ53U44PI9D5CY",
    "chat_id": "7590895952",
    "enabled": True
}

SECURITY_CONFIG = {
    "webhook_secret": "phoenix_complete_webhook_2025_ultra_secure",
    "api_keys": ["phoenix_complete_key_1", "phoenix_complete_key_2"],
    "rate_limit_per_minute": 120
}
```

### 💰 거래 설정
```python
TRADING_CONFIG = {
    "allowed_symbols": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT"],
    "min_confidence": 0.25,
    "phoenix_95_threshold": 0.45,
    "max_position_size": 0.15,
    "kelly_fraction": 0.20
}

LEVERAGE_CONFIG = {
    "leverage": 20,
    "margin_mode": "ISOLATED",
    "stop_loss_percent": 0.02,      # 2% 손절
    "take_profit_percent": 0.02,    # 2% 익절
    "liquidation_buffer": 0.1
}
```

### 🎯 Phoenix 95 AI 설정
```python
PHOENIX_95_CONFIG = {
    "threshold": 0.45,              # 45% 이상만 거래
    "multiplier": 1.3,              # 신뢰도 부스팅
    "weight": 0.95,                 # Phoenix 가중치
    "analysis_timeout": 30,         # 30초 분석 제한
    "cache_duration": 120           # 2분 캐시
}
```

---

## 🚀 실행 프로세스

### 1단계: 환경 준비
```powershell
# Docker 및 Python 환경 확인
# 필수 포트 확인 (8100-8103)
# 디렉토리 구조 생성
```

### 2단계: 핵심 서비스 구축
```powershell
# BRAIN → RISK → EXECUTE → NOTIFY 순서로 구축
# 각 서비스별 독립 실행 가능하도록 구성
# 서비스 간 통신 인터페이스 구현
```

### 3단계: 통합 및 테스트
```powershell
# 서비스 간 연동 테스트
# 실제 신호 처리 테스트
# 텔레그램 알림 테스트
# 성능 벤치마크
```

### 4단계: 배포 및 모니터링
```powershell
# Docker Compose 실행
# 헬스체크 확인
# 실시간 모니터링 시작
# ngrok 터널 연결 (선택사항)
```

---

## 📁 파일 구조 설계도

```
C:\trading_system_v4\
├── 📁 services\                    # 4개 핵심 서비스
│   ├── 🧠 brain\                   # Signal Intelligence Engine
│   │   ├── brain_service.py        # Phoenix 95 AI 엔진
│   │   ├── signal_analyzer.py      # 신호 분석기
│   │   └── config.py              # 설정 파일
│   │
│   ├── ⚖️ risk\                    # Risk Management
│   │   ├── risk_service.py         # 리스크 관리자
│   │   ├── position_manager.py     # 포지션 관리
│   │   └── kelly_calculator.py     # Kelly Criterion
│   │
│   ├── ⚡ execute\                 # Trade Execution
│   │   ├── execute_service.py      # 거래 실행기
│   │   ├── binance_client.py       # 바이낸스 클라이언트
│   │   └── leverage_manager.py     # 레버리지 관리
│   │
│   └── 📱 notify\                  # Notification Hub
│       ├── notify_service.py       # 알림 서비스
│       ├── telegram_bot.py         # 텔레그램 봇
│       └── dashboard.py           # 대시보드
│
├── 📁 shared\                      # 공통 라이브러리
│   ├── models.py                   # 데이터 모델
│   ├── database.py                # DB 연결
│   ├── redis_client.py            # Redis 클라이언트
│   └── utils.py                   # 유틸리티
│
├── 📁 config\                      # 설정 파일들
│   ├── settings.py                # 메인 설정
│   ├── trading_config.py          # 거래 설정
│   └── security_config.py         # 보안 설정
│
├── 📁 tests\                       # 테스트
│   ├── unit\                      # 단위 테스트
│   ├── integration\               # 통합 테스트
│   └── load\                      # 부하 테스트
│
├── 📁 deployment\                  # 배포 설정
│   ├── docker-compose.yml         # Docker 구성
│   ├── Dockerfile                 # Docker 이미지
│   └── nginx.conf                # 리버스 프록시
│
├── 📁 docs\                        # 문서
│   ├── README.md                  # 프로젝트 설명
│   ├── API.md                     # API 문서
│   └── DEPLOYMENT.md              # 배포 가이드
│
├── 📁 scripts\                     # 실행 스크립트
│   ├── start_dev.ps1             # 개발 환경 시작
│   ├── start_prod.ps1            # 프로덕션 시작
│   └── health_check.ps1          # 헬스체크
│
└── 📄 requirements.txt             # Python 의존성
```

---

## 🎯 다음 세션 명령어 템플릿

### 프로젝트 초기화
```
명령: "Phoenix 95 프로젝트 구조 생성"
요구사항: C:\trading_system_v4 경로에 완전한 폴더 구조와 기본 설정 파일 생성
```

### BRAIN 서비스 구축
```
명령: "BRAIN 서비스 완전 구현 - Phoenix 95 AI 엔진"
요구사항: brain_service.py + signal_analyzer.py + 테스트 코드 완전 구현
```

### RISK 서비스 구축
```
명령: "RISK 서비스 완전 구현 - 20x 레버리지 리스크 관리"
요구사항: risk_service.py + position_manager.py + kelly_calculator.py 완전 구현
```

### EXECUTE 서비스 구축
```
명령: "EXECUTE 서비스 완전 구현 - 바이낸스 거래 실행"
요구사항: execute_service.py + binance_client.py + leverage_manager.py 완전 구현
```

### NOTIFY 서비스 구축
```
명령: "NOTIFY 서비스 완전 구현 - 텔레그램 알림 및 대시보드"
요구사항: notify_service.py + telegram_bot.py + dashboard.py 완전 구현
```

### 통합 및 배포
```
명령: "Phoenix 95 시스템 통합 및 배포"
요구사항: Docker Compose + 통합 테스트 + 운영 스크립트 완전 구현
```

---

## ⚠️ 중요 원칙

### 🔍 검증된 설정 사용
- 모든 설정값은 업로드된 문서의 검증된 값 사용
- 텔레그램 토큰, API 키, 임계값 등 그대로 유지

### 🏗️ 단순함 우선
- 복잡한 마이크로서비스 대신 4개 핵심 컴포넌트만 구현
- DDD나 과도한 추상화 배제
- 실용성과 안정성 우선

### ⚡ 즉시 실행 가능
- 모든 코드는 복사-붙여넣기로 즉시 실행 가능
- PowerShell Here-String 형식 사용
- 완전한 코드 + 설정 + 테스트 포함

### 🛡️ 안정성 중시
- 검증된 아키텍처 패턴 사용
- 에러 처리 및 로깅 완비
- 안전한 종료 및 복구 메커니즘

---

## 📊 성공 기준

### 기능적 요구사항
- ✅ TradingView 웹훅 신호 수신
- ✅ Phoenix 95 AI 분석 (85% 이상 신뢰도)
- ✅ 20x 레버리지 거래 실행
- ✅ 2% 손절익절 자동화
- ✅ 텔레그램 실시간 알림
- ✅ 웹 대시보드 모니터링

### 성능 요구사항
- ✅ 신호 처리 시간: < 100ms
- ✅ 메모리 사용량: < 500MB
- ✅ 동시 처리: 1000+ req/sec
- ✅ 가용성: 99.95%

### 운영 요구사항
- ✅ 원클릭 배포 (docker-compose up)
- ✅ 실시간 헬스체크
- ✅ 자동 오류 복구
- ✅ 완전한 로깅 및 모니터링

이제 이 설계도를 기반으로 "Phoenix 95 프로젝트 구조 생성" 명령어부터 시작하시면 됩니다!